
$grid-columns: 12;
$content-padding: 5px;
$content-padding-2: 10px;
$content-padding-3:15px;
$content-padding-4:20px;
//grid gap
:root {
  --grid-gap: 10px;
}

//flex container definition
.flex-grid {
  display: flex;  
  flex-wrap: wrap;
  margin: calc(var(--grid-gap) * -1) 0 0 calc(var(--grid-gap) * -1);
}

.p-0 {
  padding: $content-padding;
}

.p-2{
  padding: $content-padding-2;
}

.p-3{
  padding: $content-padding-3;
}

.p-4{
  padding: $content-padding-4;
}
/* Containers */

.container {
  padding: $content-padding;
  display: flex;
  justify-content: flex-start;
}

.container-column {
  padding: $content-padding;
  display: flex;
  flex-direction: column;
}

.container-center {
  padding: $content-padding;
  display: flex;
  justify-content: center;
}

.container-end {
  padding: $content-padding;
  display: flex;
  justify-content: flex-end;
}

.container-around {
  padding: $content-padding;
  display: flex;
  justify-content: space-around;
}

.container-between {
  padding: $content-padding;
  display: flex;
  justify-content: space-between;
}




//flex item definition
.col {
  box-sizing: border-box;
  padding: calc(var(--grid-gap)) 0 0 calc(var(--grid-gap));
  background-clip: content-box;
  flex-basis: 100%;
}

//round flex items' width 
@function round-width ($i) {
  $width : floor(100 * $i * 100/ $grid-columns) / 100;
  @return $width#{"%"};
}

//utility classes

@for $i from 1 through $grid-columns {
  .col--#{$i} {
    flex-basis: round-width($i);
    max-width: round-width($i); 
  }
}

@media only screen and (min-width: 768px) {
  @for $i from 1 through $grid-columns {
    .col--md-#{$i} {
      flex-basis: round-width($i);
      max-width: round-width($i); 
    }
  }
}

@media only screen and (min-width: 1024px) {
  @for $i from 1 through $grid-columns {
    .col--lg-#{$i} {
      flex-basis: round-width($i);
      max-width: round-width($i); 
    }
  }
}
